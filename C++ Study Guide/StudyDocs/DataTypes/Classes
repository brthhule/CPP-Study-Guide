Data Types

- Classes
	- Class: data structure expanded, holds data and functions
	- object: instantiation of a class
	- private members are accessible only from within other members of the same class or from friends
	- protected members are accessible from members of their same class and friends and derived classes
	- public members are accessible from wherever object is visible
	- private is the default level
	class className {
	private:
	...
	public:
	...
	protected:
	...
	} objectName;
	- the above creates class className and object objectName
	- There are two ways to define methods (within and outside of the class):
	class CRectangle {
	 int x, y;
	 public:
	 void set_values (int,int);
	 int area () {return (x*y);}
	};
	void CRectangle::set_values (int a, int b) {
	 x = a;
	 y = b;
	 }
	 - :: defines the scope of the method to its class
	 - Constructors are used to create objects and assign values to its values so they may be executed
	 - Destructors destroy objects such that dynamically allocated mememory may be used for other purposes, has a ~ sign in front of the class name and carries no paramaters
	 - ex:
	 class className {
	 public:
	 CRectangle(datatype, datatype, etc);//Constructor
	 ~CRectangle ();//destructor
	 ...
	 }
	 - ex continued:
	 CRectangle::CRectangle (int a, int b) {
		 width = new int;
		 height = new int;
		 *width = a;
		 *height = b;
		}
		CRectangle::~CRectangle () {
		 delete width;
		 delete height;
		} 
	- Overloarding constructors (different ammounts of paramaters, same order)
	- Defalt constructor (no paramaters)
	- Pointers to objects of classes
	- Expressions:
		- *x, pointed by x
		- &x, address of x
		- x.y, member y of object x
		- x->y, member y of object pointed by x
		- (*x).y, member y of object pointed by x (same as above)
		- x[0], first object pointed by x
		- x [n], (n+1)th object pointed by x
- classes and structs are essentially the same thing except the default for classes is private vs public for structs
- Unions are classes and can hold functions, default access is public, but can only store one data member at a time
- Overloading operators (kinda mergin objects???):
	- To overload an operator in order to use it with classes we declare operator functions, which are regular functions whose names are the operator keyword followed by the operator sign that we want to overload. The format is: 
		type operator sign (parameters) { /*...*/ 
// vectors: overloading operators example
#include <iostream>
using namespace std; 
class CVector { 
 public: 
 int x,y; 
 CVector () {}; 
 CVector (int,int); 
 CVector operator + (CVector); 
}; 
CVector::CVector (int a, int b) { 
 x = a; 
 y = b; 
} 
CVector CVector::operator+ (CVector param) { 
 CVector temp; 
 temp.x = x + param.x; 
 temp.y = y + param.y; 
 return (temp); 
} 
int main () { 
 CVector a (3,1); 
 CVector b (1,2); 
 CVector c; 
 c = a + b; 
 cout << c.x << "," << c.y; 
 return 0; 
} 
the above returns 4,3

The statements below are equivalent:
c = a + b; 
c = a.operator+ (b);

CVector d (2,3); 
CVector e; 
e = d; // copy assignment operator

Format: expression, operator, member function, global function
@a, +-*&!~++--, A::operator@(),operator@(A)
a@, ++--, A::operator@(int), operator@(A,int)
a@b, +-*/%&|<>==!=<=>=<<>>&&||,, A::operator@(B), operator@(A,B)
a@b, = += -+ *= /= %= ^= &= != <<= >>= [], A::operator@(B),-
a(b,c,...), (), A::operator()(B,C...), -
a->x, ->, A::operator->(), -

